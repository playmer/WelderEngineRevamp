struct PointToQuadInput
{
  [Input] var ViewPosition : Real3;
}

struct PointToQuadOutput
{
  [HardwareBuiltInOutput] var ApiPerspectivePosition : Real4;
  [Output] var Uv : Real2;
}

[Geometry(maxVertices : 6)]
struct PointToQuad
{
  [AppBuiltInInput] var ViewToPerspective : Real4x4;
  var Width : Real = 0.1;

  function Main(input : PointInput[PointToQuadInput], output : TriangleOutput[PointToQuadOutput])
  {
    // Create corners of a view aligned quad
    var corners = FixedArray[Real3, 4]();
    corners[0] = input[0].ViewPosition + Real3(-this.Width,  this.Width, 0); // TopLeft
    corners[1] = input[0].ViewPosition + Real3(-this.Width, -this.Width, 0); // BottomLeft
    corners[2] = input[0].ViewPosition + Real3( this.Width, -this.Width, 0); // BottomRight
    corners[3] = input[0].ViewPosition + Real3( this.Width,  this.Width, 0); // TopRight

    // Output vertex position and uv
    var vertices = FixedArray[PointToQuadOutput, 4]();

    vertices[0].ApiPerspectivePosition = Math.Multiply(this.ViewToPerspective, Real4(corners[0], 1.0));
    vertices[1].ApiPerspectivePosition = Math.Multiply(this.ViewToPerspective, Real4(corners[1], 1.0));
    vertices[2].ApiPerspectivePosition = Math.Multiply(this.ViewToPerspective, Real4(corners[2], 1.0));
    vertices[3].ApiPerspectivePosition = Math.Multiply(this.ViewToPerspective, Real4(corners[3], 1.0));

    vertices[0].Uv = Real2(0, 0);
    vertices[1].Uv = Real2(0, 1);
    vertices[2].Uv = Real2(1, 1);
    vertices[3].Uv = Real2(1, 0);

    // First triangle
    output.Append(vertices[0], 0);
    output.Append(vertices[1], 0);
    output.Append(vertices[2], 0);
    output.Restart();

    // Second triangle
    output.Append(vertices[2], 0);
    output.Append(vertices[3], 0);
    output.Append(vertices[0], 0);
    output.Restart();
  }
}
